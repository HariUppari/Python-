############ BFS 
#####Trees
from collections import deque

def bfs_tree(root):
    if not root:
        return

    queue = deque([root])  # Initialize the queue with the root node

    while queue:
        node = queue.popleft()  # Remove the front node from the queue
        print(node.val)  # Process the current node (e.g., print its value)

        # Add the children of the current node to the queue
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

####Graphs
from collections import deque

def bfs_graph(graph, start):
    visited = set()  # To keep track of visited nodes
    queue = deque([start])  # Initialize the queue with the starting node
    visited.add(start)  # Mark the start node as visited

    while queue:
        node = queue.popleft()  # Remove the front node from the queue
        print(node)  # Process the current node (e.g., print its value)

        # Explore all neighbors of the current node
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)  # Add unvisited neighbors to the queue
                visited.add(neighbor)  # Mark the neighbor as visited

---Key Points
------Tree BFS:

-----------Straightforward as there are no cycles.
-----------Process the root, then explore its children level by level.
------Graph BFS:

-----------Use a visited set to handle cycles and avoid redundant visits.
-----------Works for both directed and undirected graphs.

##################Recursion
def recursion_function(parameters):
    # Base case: Stop recursion when a condition is met
    if base_case_condition:
        return base_case_result

    # Recursive case: Process the current state and make a recursive call
    result = process_current_state(parameters)

    # Recursive call to solve the smaller subproblem
    recursion_function(updated_parameters)

    # Optional: Combine results if necessary
    return final_result



----Base Case: Always define the stopping condition to prevent infinite recursion.
----Small Steps: Make progress in each recursive call by reducing the problem size.
----Combine Results: Aggregate results if solving multiple subproblems (e.g., divide and conquer).
----Avoid Redundant Work: Use memoization or dynamic programming to optimize recursive calls.
----Space Complexity: Recursion uses stack space proportional to the depth of the recursion tree.

###############DFS Tree and Graphs
############Trees
######Recursive 
def dfs_tree(node):
    # Base case: If the node is None, return
    if not node:
        return

    # Process the current node (e.g., print its value)
    print(node.val)

    # Recursively call DFS for the left and right children
    dfs_tree(node.left)
    dfs_tree(node.right)
########Iterative
def dfs_tree_iterative(root):
    if not root:
        return

    stack = [root]  # Initialize stack with root node

    while stack:
        node = stack.pop()  # Remove the top node from the stack
        print(node.val)  # Process the current node

        # Add the right child first, then the left child (LIFO ensures left is processed first)
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)
#############Graphs
######Recursive
def dfs_graph(node, graph, visited):
    # Base case: If the node is already visited, return
    if node in visited:
        return

    # Mark the node as visited
    visited.add(node)

    # Process the current node (e.g., print its value)
    print(node)

    # Recursively call DFS for all neighbors
    for neighbor in graph[node]:
        dfs_graph(neighbor, graph, visited)
#########Iterative
def dfs_graph_iterative(start_node, graph):
    visited = set()  # Track visited nodes
    stack = [start_node]  # Initialize stack with the starting node

    while stack:
        node = stack.pop()  # Remove the top node from the stack
        
        # Process the node if not visited
        if node not in visited:
            print(node)  # Process the current node
            visited.add(node)

            # Add neighbors to the stack (unvisited neighbors)
            for neighbor in reversed(graph[node]):  # Reverse for consistent order
                if neighbor not in visited:
                    stack.append(neighbor)

https://chatgpt.com/c/6760b735-97cc-8001-b24a-c4e551bb0a35

