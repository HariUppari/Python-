-------------------------Search an element in 2D matrix
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        # Initialize the low and high pointers for binary search
        low = 0
        high = (len(matrix) * len(matrix[0])) - 1
        
        # Binary search loop
        while low <= high:
            mid = (low + high) // 2
            # Correctly map the mid index to 2D indices
            i = mid // len(matrix[0])  # Row index
            j = mid % len(matrix[0])  # Column index
            
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] < target:
                low = mid + 1
            else:
                high = mid - 1
        
        # If not found, return False
        return False


----------------------Search an element in rotated sorted array

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        low, high = 0, len(nums) - 1
        
        while low <= high:
            mid = (low + high) // 2
            
            # If the target is found, return the index
            if nums[mid] == target:
                return mid
            
            # Determine which part of the array is sorted
            if nums[low] <= nums[mid]:  # Left part is sorted
                if nums[low] <= target < nums[mid]:
                    high = mid - 1  # Target is in the left part
                else:
                    low = mid + 1   # Target is in the right part
            else:  # Right part is sorted
                if nums[mid] < target <= nums[high]:
                    low = mid + 1   # Target is in the right part
                else:
                    high = mid - 1  # Target is in the left part
        
        # If the target is not found, return -1
        return -1
