----------Construct Binary Tree from inorder and Postorder Traversal


class Solution(object):
    def buildTreeHelper(self, inorder, postorder, post_end, in_st, in_end, in_map):
        if in_st > in_end:
            return None

        # Create the root node
        node = TreeNode(postorder[post_end])

        # Find the index of the root node in the inorder traversal
        node_index = in_map[node.val]

        # Calculate the size of the left subtree
        left_size = node_index - in_st

        # Recursively construct the left subtree
        node.left = self.buildTreeHelper(
            inorder, postorder, post_end - (in_end - node_index) - 1, in_st, node_index - 1, in_map
        )

        # Recursively construct the right subtree
        node.right = self.buildTreeHelper(
            inorder, postorder, post_end - 1, node_index + 1, in_end, in_map
        )

        return node

    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: Optional[TreeNode]
        """
        if not inorder or not postorder:
            return None

        # Create a hashmap for the indices of inorder elements
        in_map = {value: index for index, value in enumerate(inorder)}

        # Start with the last index of postorder
        post_end = len(postorder) - 1

        # Call the helper function
        return self.buildTreeHelper(inorder, postorder, post_end, 0, len(inorder) - 1, in_map)
