--------------------------Word Search
class Solution(object):
    def existHelper(self, board, word, row, column, index):
        # Base case: If the entire word is matched
        if index == len(word):
            return True
        
        # Out of bounds or character mismatch or already visited(no backward direction)
        if row < 0 or row >= len(board) or column < 0 or column >= len(board[0]) or board[row][column] != word[index]:
            return False
        
        # Save the current cell's value and mark it as visited
        temp = board[row][column]
        board[row][column] = 'x'  # Mark as visited
        
        # Explore all four directions
        Right = self.existHelper(board, word, row + 1, column, index + 1)
        Down = self.existHelper(board, word, row, column + 1, index + 1)
        Left = self.existHelper(board, word, row - 1, column, index + 1)
        Up = self.existHelper(board, word, row, column - 1, index + 1)
        
        # Restore the current cell's value for backtracking
        board[row][column] = temp
        
        # Return True if any direction matches
        return Right or Down or Left or Up
    
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        # Loop through all cells as potential starting points
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.existHelper(board, word, i, j, 0):  # Start DFS
                    return True
        return False

